version: '3.8'

networks:
  apex-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  uploads:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: apex_postgres
    environment:
      POSTGRES_DB: apex_db
      POSTGRES_USER: apex_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apex_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=es_MX.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-python/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apex_user -d apex_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=128MB
      -c effective_cache_size=256MB

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: apex_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Backend Python API
  backend:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: apex_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://apex_user:${POSTGRES_PASSWORD:-apex_secure_password}@postgres:5432/apex_db
      - DATABASE_URL_SYNC=postgresql://apex_user:${POSTGRES_PASSWORD:-apex_secure_password}@postgres:5432/apex_db
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "8000:8000"
    volumes:
      - uploads:/app/uploads
      - ./backend-python/app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Web App
  frontend:
    build:
      context: ./frontend-web
      dockerfile: Dockerfile
    container_name: apex_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-nextauth-secret}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Landing Page
  landing:
    build:
      context: ./landing-page
      dockerfile: Dockerfile
    container_name: apex_landing
    ports:
      - "3001:3000"
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: apex_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
      - landing
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: apex_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - apex-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: apex_grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - apex-network
    restart: unless-stopped

  # Log Management - ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: apex_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - ./elk/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - apex-network
    restart: unless-stopped

  # Backup Service
  backup:
    image: alpine:latest
    container_name: apex_backup
    volumes:
      - postgres_data:/backup/postgres
      - uploads:/backup/uploads
      - ./backups:/backups
    networks:
      - apex-network
    restart: "no"
    command: |
      sh -c "
        apk add --no-cache postgresql-client aws-cli
        echo '0 2 * * * pg_dump -h postgres -U apex_user apex_db > /backups/db_backup_\$(date +\%Y\%m\%d_\%H\%M\%S).sql' > /etc/crontabs/root
        echo '0 3 * * * tar -czf /backups/uploads_backup_\$(date +\%Y\%m\%d_\%H\%M\%S).tar.gz -C /backup uploads' >> /etc/crontabs/root
        crond -f
      "
